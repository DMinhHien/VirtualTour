@page "/{ssid}"
@using MudBlazor
@using Newtonsoft.Json
@using VirtualTour.Model
@using VirtualTour.Web.Components.Layout
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@layout EmptyLayout
@inject Blazored.Toast.Services.IToastService ToastService
<style>
    .hover-icon {
        transition: transform 0.2s ease-in-out, color 0.2s ease-in-out;
    }

        .hover-icon:hover {
            transform: scale(1.1);
            color: #FF5733; /* Replace with your desired hover color */
        }
</style>
@if (wifi == null)
{
    <p>Loading wifi details...</p>
}
else
{
    <div style="height: 100vh;background-color: #3b3b3b;">
    <MudContainer Style="display: flex; justify-content: center; align-items: center; min-height: 80vh;">
        <MudCard Outlined="true" Style="width: 400px; text-align: center;background-color: white;">
            <MudCardContent>
                <MudImage Src="/wifi.png" Width="200" Height="200"  Class="rounded-lg ma-4" />
                <MudText Typo="Typo.h6" GutterBottom="true"><strong>Network:</strong></MudText>
                <MudText>@wifi.SSIDName</MudText>
                <MudText Typo="Typo.h6" GutterBottom="true"><strong>Password:</strong> </MudText>
                <MudStack Justify="Justify.Center" Style="margin-left:30px" Spacing="2" AlignItems="AlignItems.Center" Row="true">
                    <MudText>@wifi.WifiPassHash</MudText>
                    <MudIcon Class="hover-icon" Icon="@Icons.Material.Filled.ContentCopy" @onclick="CopyPassword"></MudIcon>
                </MudStack>
             
            </MudCardContent>
        </MudCard>
    </MudContainer>
    </div>
}

@code {
    [Parameter] 
    public string ssid { get; set; }

    private QRCodeModel wifi;

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync($"api/QRCodes/getBySsid/{ssid}");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            var result = JsonConvert.DeserializeObject<BaseResponseModel>(json);
            if (result != null && result.Success)
            {
                wifi = JsonConvert.DeserializeObject<QRCodeModel>(result.Data.ToString());
            }
            else
            {
                ToastService.ShowError("Failed to load wifi details.");
            }
        }
        else
        {
            ToastService.ShowError("Error contacting the server.");
        }
    }

    async Task CopyPassword()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", wifi.WifiPassHash);
        ToastService.ShowSuccess("Password copied to clipboard.");
    }
}
