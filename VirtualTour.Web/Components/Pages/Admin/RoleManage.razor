@page "/admin/roles"
@using System.Globalization
@layout AdminLayout
@using BlazorBootstrap
@using VirtualTour.Model
@using VirtualTour.Web.Components.BaseComponents
@using MudBlazor
@using VirtualTour.Web.Components.Layout
<PermissionView Permission="Admin.View">
      <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
            <MudText Typo="Typo.h3" Class="fw-bold">Role List</MudText>
    <PermissionView Permission="Roles.Create">
            <MudButton  Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" @onclick="ToggleCreateCard">
    <MudIcon Icon="@Icons.Material.Filled.Add" /> Create New Role
</MudButton>
    </PermissionView>
</MudStack>
@if (roles == null)
{
    <p>Loading roles...</p>
}
else
{
     <MudContainer Class="mt-4 w-75" Style="width: 100%; max-width: none;">
    <MudDataGrid T="RoleModel"
                 Items="@roles"
                 @ref="RoleGrid"
                 Filterable="true"
                 Sortable="true"
                 PageSize="5"
                 Dense="true"
                 FilterMode="@DataGridFilterMode.ColumnFilterRow">
        <Columns>
                <PropertyColumn Filterable="false" Property="x => x.Id" Title="ID" />
            <PropertyColumn Property="x => x.RoleName" Title="Role Name" />
                    <PropertyColumn Filterable="false" Property="x => x.CreatedAt" Title="Created Date">

                   <CellTemplate>
                            @context.Item.CreatedAt.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)
                   </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.IsActive" Title="Active">
                  <CellTemplate>
                    @if (context.Item.IsActive)
                    {
                            <MudChip Color="Color.Primary" Style="width:50px">Yes</MudChip>
                    }
                    else
                    {
                            <MudChip Color="Color.Error" Style="width:50px">No</MudChip>
                    }
            </CellTemplate>
            </PropertyColumn>
            <TemplateColumn  Filterable="false" Sortable="false">
                <CellTemplate>
                     <MudStack Row="true" Spacing="2">
                                <PermissionView Permission="Roles.Edit">
                                  <MudTooltip Text="Edit">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                               Size="Size.Small"
                                               Color="Color.Primary"
                                               OnClick="@(() => EditRole(context.Item))" />
                                </MudTooltip>
                                </PermissionView>
                                 <PermissionView Permission="Roles.Delete">
                                <MudTooltip Text="Delete">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                   Size="Size.Small"
                                                   Color="Color.Error"
                                                   OnClick="@(() => { DeleteId = context.Item.Id; OnShowModalDeleteClick(); })" />
                                </MudTooltip>
                                </PermissionView>
                        </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="RoleModel" />
        </PagerContent>
    </MudDataGrid>
    </MudContainer>
}

<Modal @ref="ModalDelete" title="Notification">
    <BodyTemplate>
        Are you sure you want to delete this role?
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" style="width:80px" @onclick="HandleDelete">Yes</Button>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalDeleteClick">Cancel</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="ModalCreate" title="Create New Role" IsVerticallyCentered="true" IsScrollable="true">
    <BodyTemplate>
        <div class="card-body">
            <div class="form-group mb-3">
                    <MudTextField Style="background-color: white;"
                                  Required="true" Label="Role Name"
                                  @bind-Value="newRole.RoleName" Variant="Variant.Outlined" />
            </div>
            <div class="form-group mb-3">
                <label>Active</label>
                <input type="checkbox" class="form-check-input" @bind="newRole.IsActive" />
            </div>
            <h4>Assign Permissions</h4>
            @if (availablePermissions == null)
            {
                <p>Loading permissions...</p>
            }
            else
            {
                @foreach (var permission in availablePermissions.Where(p => p.IsActive))
                {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" value="@permission.Id"
                               @onchange="e => TogglePermission(permission.Id, e.Value)" />
                        <label class="form-check-label">@permission.PermissionName</label>
                    </div>
                }
            }
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" style="width:180px" @onclick="CreateRole">Create Role</Button>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalCreateClick">Cancel</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="ModalEdit" title="Update Role" IsVerticallyCentered="true" IsScrollable="true">
    <BodyTemplate>
        <div class="card-body">
            <div class="form-group mb-3">
                    <MudTextField Style="background-color: white;"
                                  Required="true" Label="Role Name"
                                  @bind-Value="editingRole.RoleName" Variant="Variant.Outlined" />
            </div>
            <div class="form-group mb-3">
                <label>Active</label>
                <input type="checkbox" class="form-check-input" @bind="editingRole.IsActive" />
            </div>
            <h4>Assign Permissions</h4>
            @if (availablePermissions == null)
            {
                <p>Loading permissions...</p>
            }
            else
            {
                @foreach (var permission in availablePermissions)
                {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" value="@permission.Id"
                               checked="@editingSelectedPermissionIds.Contains(permission.Id)"
                               @onchange="e => ToggleEditPermission(permission.Id, e.Value)" />
                        <label class="form-check-label">@permission.PermissionName</label>
                    </div>
                }
            }
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" style="width:180px" @onclick="() => UpdateRole(editingRole)">Update Role</Button>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalEditClick">Cancel</Button>
    </FooterTemplate>
</Modal>
</PermissionView>
@code {
    private async Task<GridDataProviderResult<RoleModel>> RolesDataProvider(GridDataProviderRequest<RoleModel> request)
    {
        return await Task.FromResult(request.ApplyTo(roles));
    }
}